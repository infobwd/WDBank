
// ==== HELPERS ====
const $id = (id)=>document.getElementById(id);
const setText = (id, t)=>{ const el=$id(id); if(el) el.textContent=t; };
const toNumber = (v)=> Number(String(v??'').replace(/[, ]/g,''));
const fmtNumber = (v)=>{ const n=toNumber(v); return isFinite(n)? n.toLocaleString('th-TH', {maximumFractionDigits:2}) : String(v??''); };
const parseThaiDate = (s)=>{ try{ s=String(s); const [datePart, timePart='00:00:00']=s.split(',').map(x=>x.trim()); const [dd,mm,yy]=datePart.split('/').map(n=>parseInt(n,10)); const [HH,MM,SS]=timePart.split(':').map(n=>parseInt(n,10)); const gy=(yy>2400? yy-543:yy); return new Date(gy, (mm||1)-1, dd||1, HH||0, MM||0, SS||0); }catch(e){ return null; } };
const inRange = (d,s,e)=> d && d>=s && d<e;
const monthRange = (date)=>{ const s=new Date(date.getFullYear(), date.getMonth(), 1,0,0,0,0); const e=new Date(date.getFullYear(), date.getMonth()+1,1,0,0,0,0); return {start:s,end:e}; };
const weekRange = (date)=>{ const d=new Date(date); const day=(d.getDay()+6)%7; const start=new Date(d); start.setDate(d.getDate()-day); start.setHours(0,0,0,0); const end=new Date(start); end.setDate(start.getDate()+7); return {start,end}; };
const formatAccountMasked = (val)=>{ const raw=String(val??'').replace(/[ ,]/g,''); if(!raw) return '-'; return raw.slice(0,4)+' \u2022\u2022'; };

// ==== LOADERS ====
async function ensureTX(){
  if (Array.isArray(window.TX) && window.TX.length) return window.TX;
  const res = await fetch(window.SHEET_TX, {cache:'no-store'}); const data = await res.json();
  window.TX = Array.isArray(data)? data : []; return window.TX;
}
async function ensureAccounts(){
  if (window.ACC && window.ACC.size) return window.ACC;
  const res = await fetch(window.SHEET_ACCOUNTS,{cache:'no-store'}); const arr = await res.json();
  const map = new Map();
  (arr||[]).forEach(row=>{
    const acc = String(row['‡∏ö‡∏±‡∏ç‡∏ä‡∏µ']||row['‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô']||row['User_Id']||'').trim();
    const bal = toNumber(row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠']||row['‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠']||row['‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠']||row['Balance']||0);
    if(acc) map.set(acc, bal);
  });
  window.ACC = map; return window.ACC;
}

// ==== Mini Tips ====
window.MINI_TIPS = [
  '‡∏≠‡∏≠‡∏°‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡πÅ‡∏ï‡πà‡∏ö‡πà‡∏≠‡∏¢ ‡πÜ ‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏±‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞‡∏Å‡πâ‡∏≠‡∏ô‡πÉ‡∏´‡∏ç‡πà üí™',
  '‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥ ‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå/‡∏û‡∏§. ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ñ‡∏ß 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‚è∞',
  '‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô ‚ú®',
  '‡∏≠‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ: ‡πÅ‡∏¢‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô üíº',
  '‡∏ä‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ‡∏™‡∏ô‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÅ‡∏£‡∏á‡πÉ‡∏à‡∏Ç‡∏∂‡πâ‡∏ô ü§ù'
];
function setMiniTip(){ const el=$id('miniTip'); if(!el) return; const idx=Math.floor(Date.now()/86400000)%MINI_TIPS.length; el.textContent=MINI_TIPS[idx]; el.classList.remove('sk','sk-title'); }
function setMiniTipAnimated(){
  const el=$id('miniTip'); if(!el||!window.MINI_TIPS) return;
  const next = window.MINI_TIPS[Math.floor(Math.random()*window.MINI_TIPS.length)];
  el.classList.add('fade','fade-out');
  setTimeout(()=>{ el.textContent = next; el.classList.remove('fade-out'); el.classList.add('fade-in'); setTimeout(()=> el.classList.remove('fade','fade-in'), 480); }, 220);
}

// ==== Highlight Accounts (2 conditions) ====
async function computeHighlightTop2(){
  await ensureTX(); await ensureAccounts();
  const now=new Date(); const {start,end}=monthRange(now);
  const depCount=new Map(), accClass=new Map(), withdrew=new Set(), lastDep=new Map();
  (window.TX||[]).forEach(r=>{
    const d=parseThaiDate(r['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']); if(!d) return;
    if(!inRange(d,start,end)) return;
    const acc=String(r['‡∏ö‡∏±‡∏ç‡∏ä‡∏µ']||r['‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô']||'').trim(); if(!acc) return;
    const cls=String(r['‡∏ä‡∏±‡πâ‡∏ô']||r['‡∏´‡πâ‡∏≠‡∏á']||'‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏');
    const typ=String(r['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£']);
    if(typ==='‡∏ù‡∏≤‡∏Å'){ depCount.set(acc,(depCount.get(acc)||0)+1); const prev=lastDep.get(acc); if(!prev||d>prev) lastDep.set(acc,d); accClass.set(acc,cls); }
    else if(typ==='‡∏ñ‡∏≠‡∏ô'){ withdrew.add(acc); accClass.set(acc,cls); }
  });
  let sum=0,n=0; depCount.forEach(v=>{sum+=v;n++;}); const baseline = n? (sum/n):0;
  const accMap=window.ACC instanceof Map? window.ACC : new Map();
  const rows=[];
  depCount.forEach((cnt,acc)=>{
    if(cnt>baseline && !withdrew.has(acc)){
      const cls=accClass.get(acc)||'‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      const last=lastDep.get(acc)? lastDep.get(acc).getTime():0;
      const bal=accMap.get(acc)||0;
      const over=baseline? ((cnt-baseline)/baseline*100):0;
      rows.push({acc,cls,cnt,last,bal,over});
    }
  });
  rows.sort((a,b)=> b.cnt - a.cnt || b.last - a.last || b.bal - a.bal);
  const grid=$id('highlightGrid'); const note=$id('highlightNote');
  grid.innerHTML='';
  if(rows.length===0){ if(note) note.textContent='‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'; return; }
  rows.slice(0,3).forEach(r=>{
    const el=document.createElement('div'); el.className='hi-item';
    const lastTxt = r.last? new Date(r.last).toLocaleDateString('th-TH',{day:'2-digit',month:'short'}) + ' ' + new Date(r.last).toLocaleTimeString('th-TH',{hour:'2-digit',minute:'2-digit',hour12:false}) : '-';
    el.innerHTML = `<div class="hi-h">‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${formatAccountMasked(r.acc)}</div>
      <div class="hi-sub">‡∏ä‡∏±‡πâ‡∏ô ${r.cls}</div>
      <div class="hi-sub">‡∏ù‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: <b>${r.cnt}</b> ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚Ä¢ ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${lastTxt}</div>
      <div class="hi-kpi">‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ~ ${(isFinite(r.over)? (r.over>=0? '+':'')+r.over.toFixed(0):'0')}% ‚Ä¢ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ${fmtNumber(r.bal)} ‡∏ø</div>`;
    grid.appendChild(el);
  });
}

// ==== Gamification Core ====
function dayKey(d){ return d.toISOString().slice(0,10); }
function computeWeeklyMission(){
  const {start,end}=weekRange(new Date());
  const map=new Map();
  (window.TX||[]).forEach(r=>{
    const d=parseThaiDate(r['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']); if(!d) return;
    if(!inRange(d,start,end)) return;
    if(String(r['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'])!=='‡∏ù‡∏≤‡∏Å') return;
    const acc=String(r['‡∏ö‡∏±‡∏ç‡∏ä‡∏µ']||r['‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô']||'').trim(); if(!acc) return;
    map.set(acc,(map.get(acc)||0)+1);
  });
  let done=0; map.forEach(v=>{ if(v>=3) done++; });
  const total=map.size; const pct= total? Math.round(done/total*100):0;
  const bar=$id('gmProgressBar'); if(bar) bar.style.width=pct+'%';
  setText('gmDone', String(done)); setText('gmTotal', String(total)); setText('gmPct', pct+'%');
  $id('gmProgressBar')?.parentElement?.classList.remove('sk','sk-card');
}

function clsSkinKey(name){
  const n = String(name||'').replace(/\s+/g,'').replace('‡∏õ.','‡∏õ');
  if (n.startsWith('‡∏õ.')){
    const d = n.replace('‡∏õ.','');
    return 'skin-‡∏õ'+d;
  }
  return 'skin-‡∏õ1';
}

function computeWeeklyClassLeaderboard(){
  const {start,end}=weekRange(new Date());
  const perClassAcc=new Map();
  (window.TX||[]).forEach(r=>{
    const d=parseThaiDate(r['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']); if(!d) return;
    if(!inRange(d,start,end)) return;
    if(String(r['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'])!=='‡∏ù‡∏≤‡∏Å') return;
    const acc=String(r['‡∏ö‡∏±‡∏ç‡∏ä‡∏µ']||r['‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô']||'').trim(); if(!acc) return;
    const cls=String(r['‡∏ä‡∏±‡πâ‡∏ô']||r['‡∏´‡πâ‡∏≠‡∏á']||'‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏');
    const m = perClassAcc.get(cls)||new Map(); m.set(acc,(m.get(acc)||0)+1); perClassAcc.set(cls,m);
  });
  const rows=[]; perClassAcc.forEach((m,cls)=>{ let sum=0,n=0; m.forEach(v=>{ sum+=v; n++; }); const avg=n? (sum/n):0; rows.push({cls,avg,n}); });
  rows.sort((a,b)=> b.avg - a.avg || b.n - a.n);
  const list=$id('gmClassTop'); list.innerHTML='';
  rows.slice(0,5).forEach((r,i)=>{
    const el=document.createElement('div'); el.className='gm-item';
    el.innerHTML = `#${i+1} ‡∏ä‡∏±‡πâ‡∏ô <b>${r.cls}</b> ‚Äî ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ <b>${r.avg.toFixed(2)}</b> ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡∏°‡∏µ ${r.n} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)`;
    const badge=document.createElement('span'); badge.className='cls-badge '+clsSkinKey(r.cls); badge.textContent=r.cls; el.appendChild(badge);
    list.appendChild(el);
  });
}

function computeStreaksTop(){
  const now=new Date(); const from=new Date(now); from.setDate(now.getDate()-30); from.setHours(0,0,0,0);
  const depDays=new Map();
  (window.TX||[]).forEach(r=>{
    if(String(r['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'])!=='‡∏ù‡∏≤‡∏Å') return;
    const d=parseThaiDate(r['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']); if(!d || d<from) return;
    const acc=String(r['‡∏ö‡∏±‡∏ç‡∏ä‡∏µ']||r['‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô']||'').trim(); if(!acc) return;
    const key=dayKey(d);
    let set=depDays.get(acc); if(!set){ set=new Set(); depDays.set(acc,set); }
    set.add(key);
  });
  function currentStreak(set){
    let streak=0; const d=new Date(); d.setHours(0,0,0,0);
    for(let i=0;i<31;i++){ const k=dayKey(d); if(set.has(k)){ streak++; d.setDate(d.getDate()-1);} else break; }
    return streak;
  }
  const accMap = (window.ACC instanceof Map)? window.ACC : new Map();
  const rows=[];
  depDays.forEach((set,acc)=>{
    const s=currentStreak(set);
    const days=[...set].sort(); const last = days.length? new Date(days[days.length-1]) : null;
    rows.push({acc, s, last: last? last.getTime():0, bal: accMap.get(acc)||0});
  });
  rows.sort((a,b)=> b.s - a.s || b.last - a.last || b.bal - a.bal);

  const grid=$id('gmStreakTop'); grid.innerHTML='';
  rows.slice(0,5).forEach((r,i)=>{
    const el=document.createElement('div'); el.className='gm-badge';
    let clazz=''; let label='';
    if(r.s>=10){ clazz='badge-10'; label='Streak 10+'; }
    else if(r.s>=5){ clazz='badge-5'; label='Streak 5+'; }
    else if(r.s>=3){ clazz='badge-3'; label='Streak 3+'; }
    const lastTxt = r.last? new Date(r.last).toLocaleDateString('th-TH',{day:'2-digit',month:'short'}) + ' ' + new Date(r.last).toLocaleTimeString('th-TH',{hour:'2-digit',minute:'2-digit',hour12:false}) : '-';
    el.innerHTML = `<div class="gm-medal">üèÖ</div>
      <div class="gm-btxt ${clazz}">
        <div class="gm-btitle">${label||'‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡∏µ!'}</div>
        <div class="gm-bmeta">‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${formatAccountMasked(r.acc)} ‚Ä¢ ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${lastTxt}</div>
        <div class="gm-kpi">‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: <b>${r.s}</b> ‡∏ß‡∏±‡∏ô‡∏ï‡∏¥‡∏î</div>
      </div>`;
    grid.appendChild(el);
  });
}

// Class mission UI
function listClassesThisWeek(){
  const {start,end}=weekRange(new Date());
  const set=new Set();
  (window.TX||[]).forEach(r=>{
    const d=parseThaiDate(r['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']); if(!d) return;
    if(!inRange(d,start,end)) return;
    if(String(r['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'])!=='‡∏ù‡∏≤‡∏Å') return;
    const cls=String(r['‡∏ä‡∏±‡πâ‡∏ô']||r['‡∏´‡πâ‡∏≠‡∏á']||'‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏');
    set.add(cls);
  });
  return [...set].sort();
}
function populateClassSelect(){
  const sel=$id('gmClassSelect'); if(!sel) return;
  const classes=listClassesThisWeek();
  sel.innerHTML='';
  if(classes.length===0){ sel.innerHTML='<option value="">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ</option>'; }
  else {
    classes.forEach(c=>{ const opt=document.createElement('option'); opt.value=c; opt.textContent=c; sel.appendChild(opt); });
    sel.classList.remove('sk','sk-title');
  }
}
function computeClassMissionProgress(clsName){
  const {start,end}=weekRange(new Date());
  const map=new Map();
  (window.TX||[]).forEach(r=>{
    const d=parseThaiDate(r['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']); if(!d) return;
    if(!inRange(d,start,end)) return;
    if(String(r['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'])!=='‡∏ù‡∏≤‡∏Å') return;
    const cls=String(r['‡∏ä‡∏±‡πâ‡∏ô']||r['‡∏´‡πâ‡∏≠‡∏á']||'‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'); if(cls!==clsName) return;
    const acc=String(r['‡∏ö‡∏±‡∏ç‡∏ä‡∏µ']||r['‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô']||'').trim(); if(!acc) return;
    map.set(acc,(map.get(acc)||0)+1);
  });
  let done=0; map.forEach(v=>{ if(v>=3) done++; });
  const total=map.size; const pct = total? Math.round(done/total*100) : 0;
  setText('gmClsDone', String(done)); setText('gmClsTotal', String(total)); setText('gmClsPct', pct+'%');
  const bar=$id('gmClsBar'); if(bar) bar.style.width=pct+'%';
  $id('gmClsBar')?.parentElement?.classList.remove('sk','sk-card');
  return {done,total,pct,map};
}

// LINE Share (Class Mission)
async function shareClassMission(){
  try{
    const sel=$id('gmClassSelect'); if(!sel || !sel.value){ Swal.fire('Info','‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏ä‡∏£‡πå','info'); return; }
    const cls=sel.value;
    const {done,total,pct,map} = computeClassMissionProgress(cls);
    const arr=[...map.entries()].map(([acc,cnt])=>({acc,cnt})).sort((a,b)=>b.cnt-a.cnt).slice(0,10);
    const items = arr.map(r=>({ type:'box', layout:'horizontal', contents:[
      {type:'text', text: formatAccountMasked(r.acc), size:'sm', flex:2},
      {type:'text', text: String(r.cnt)+' ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', size:'sm', align:'end', flex:1}
    ] }));
    const flex = {
      type:'flex',
      altText:`‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ - ‡∏´‡πâ‡∏≠‡∏á ${cls}`,
      contents:{ type:'bubble', size:'mega',
        hero:{ type:'image', url:'https://raw.githubusercontent.com/infobwd/wdconnect/main/top10.png', size:'full', aspectRatio:'20:13', aspectMode:'cover' },
        body:{ type:'box', layout:'vertical', contents:[
          {type:'text', text:'‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ', weight:'bold', size:'lg'},
          {type:'text', text:`‡∏´‡πâ‡∏≠‡∏á ${cls}`, color:'#64748b', size:'sm'},
          {type:'separator', margin:'md'},
          {type:'text', text:`‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${done}/${total} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‚Ä¢ ${pct}%`, size:'md', weight:'bold', color:'#059669', margin:'sm'},
          {type:'box', layout:'vertical', margin:'md', spacing:'sm', contents: items.length? items : [{type:'text', text:'(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)'}] }
        ]},
        footer:{ type:'box', layout:'vertical', contents:[
          {type:'button', style:'primary', action:{type:'uri', label:'‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', uri: (window.LIFF_DEEPLINK || 'https://liff.line.me/')} }
        ]}
      }
    };
    if(!window.liff){ Swal.fire('Error','‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö LIFF SDK','error'); return; }
    if(!window.LIFF_ID){ Swal.fire('Error','‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LIFF_ID','error'); return; }
    await liff.init({ liffId: window.LIFF_ID });
    if(!liff.isLoggedIn()) liff.login();
    const res = await liff.shareTargetPicker([flex]);
    if(res){ Swal.fire('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à','‡πÅ‡∏ä‡∏£‡πå‡∏ú‡∏•‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡πâ‡∏ß','success'); }
  }catch(e){ Swal.fire('Error', String(e), 'error'); }
}

// ==== BOOT ====
document.addEventListener('DOMContentLoaded', async ()=>{
  try{
    setMiniTip();
    setInterval(setMiniTipAnimated, 12000);
    await ensureTX(); await ensureAccounts();
    await computeHighlightTop2();
    computeWeeklyMission();
    computeWeeklyClassLeaderboard();
    computeStreaksTop();
    populateClassSelect();
    const sel=$id('gmClassSelect'); if(sel && sel.value){ computeClassMissionProgress(sel.value); }
    $id('gmShareClass')?.addEventListener('click', shareClassMission);
  }catch(e){ console.warn('init error', e); }
});
